"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSubscribersLoader = void 0;
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const eventemitter2_1 = require("eventemitter2");
const events_metadata_accessor_1 = require("./events-metadata.accessor");
let EventSubscribersLoader = class EventSubscribersLoader {
    constructor(discoveryService, eventEmitter, metadataAccessor, metadataScanner) {
        this.discoveryService = discoveryService;
        this.eventEmitter = eventEmitter;
        this.metadataAccessor = metadataAccessor;
        this.metadataScanner = metadataScanner;
    }
    onApplicationBootstrap() {
        this.loadEventListeners();
    }
    onApplicationShutdown() {
        this.eventEmitter.removeAllListeners();
    }
    loadEventListeners() {
        const providers = this.discoveryService.getProviders();
        const controllers = this.discoveryService.getControllers();
        [...providers, ...controllers]
            .filter(wrapper => wrapper.isDependencyTreeStatic())
            .filter(wrapper => wrapper.instance)
            .forEach((wrapper) => {
            const { instance } = wrapper;
            const prototype = Object.getPrototypeOf(instance);
            this.metadataScanner.scanFromPrototype(instance, prototype, (methodKey) => this.subscribeToEventIfListener(instance, methodKey));
        });
    }
    subscribeToEventIfListener(instance, methodKey) {
        const eventListenerMetadata = this.metadataAccessor.getEventHandlerMetadata(instance[methodKey]);
        if (!eventListenerMetadata) {
            return;
        }
        const { event, options } = eventListenerMetadata;
        const listenerMethod = !!(options === null || options === void 0 ? void 0 : options.prependListener)
            ? this.eventEmitter.prependListener.bind(this.eventEmitter)
            : this.eventEmitter.on.bind(this.eventEmitter);
        listenerMethod(event, (...args) => instance[methodKey].call(instance, ...args), options);
    }
};
EventSubscribersLoader = __decorate([
    common_1.Injectable(),
    __metadata("design:paramtypes", [core_1.DiscoveryService,
        eventemitter2_1.EventEmitter2,
        events_metadata_accessor_1.EventsMetadataAccessor,
        core_1.MetadataScanner])
], EventSubscribersLoader);
exports.EventSubscribersLoader = EventSubscribersLoader;
